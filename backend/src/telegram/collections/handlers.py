from aiogram import F, Dispatcher, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message,
)
from fastapi import HTTPException

from src.collections.schemas import CollectionCreate, CollectionNoteCreate
from src.collections.service import (
    get_collections,
    create_collection,
    get_collection_notes_by_collection_id,
    get_collection_note_by_id,
    delete_collection_note,
    create_collection_note,
    get_collection_by_id,
    delete_collection,
)
from src.database import db_manager
from src.telegram.utils import (
    permission_decorator,
    Permission,
    edit_message,
    grouper,
    convert_to_moscow_time,
)


router = Router()


class NoteState(StatesGroup):
    amount = State()
    name = State()
    collection_id = State()


class CollectionState(StatesGroup):
    name = State()


@router.callback_query(F.data == "collections")
@permission_decorator(Permission.ADMIN)
@edit_message
async def collections_callback(_: CallbackQuery) -> tuple[str, InlineKeyboardMarkup]:
    async with db_manager.session_maker() as session:
        collections = await get_collections(session=session)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
    buttons = [
        InlineKeyboardButton(
            text=collection.name,
            callback_data=f"collection_{collection.name}_{collection.id}",
        )
        for collection in collections
    ]

    keyboard_rows = [list(filter(None, group)) for group in grouper(buttons, 2)]

    back_button = [
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="add-collection"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="rm-choice-collection"
            )
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="menu")],
    ]
    keyboard_rows.extend(back_button)

    collections_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    return "üëï <b>–ö–æ–ª–ª–µ–∫—Ü–∏–∏:</b>", collections_keyboard


@router.callback_query(F.data == "add-collection")
@permission_decorator(Permission.ADMIN)
@edit_message
async def create_collection_callback(
    _: CallbackQuery,
    state: FSMContext,
) -> tuple[str, InlineKeyboardMarkup | None]:
    await state.set_state(CollectionState.name)
    return "üîñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", None


@router.message(CollectionState.name)
@permission_decorator(Permission.ADMIN)
async def collection_name_state(message: Message, state: FSMContext):
    name = message.text

    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üëï –ö–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="collections")],
            [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="menu")],
        ]
    )

    try:
        async with db_manager.session_maker() as session:
            collection_create = CollectionCreate(name=name)
            await create_collection(
                session=session, collection_create=collection_create
            )
    except HTTPException:
        await message.answer(
            "üö´ <b>–¢–∞–∫–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ –µ—Å—Ç—å</b>\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
        )
        return

    await message.answer("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=inline_keyboard)
    await state.clear()


@router.callback_query(F.data.startswith("collection_"))
@permission_decorator(Permission.ADMIN)
@edit_message
async def collection_detail_callback(
    callback: CallbackQuery,
) -> tuple[str, InlineKeyboardMarkup | None]:
    collection_name = callback.data.split("_")[1]
    collection_id = int(callback.data.split("_")[2])
    async with db_manager.session_maker() as session:
        notes = await get_collection_notes_by_collection_id(
            session=session, collection_id=collection_id
        )
    summ = 0
    message = "üëï <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è: {0}\nüí∞ –í—Å–µ–≥–æ: {1} ‚ÇΩ</b>\n\n"
    for note in notes:
        summ += note.amount
        message += f"üïí<b><i> {convert_to_moscow_time(note.created_at)}</i></b>\n"
        message += f"–°—É–º–º–∞: {note.amount} ‚ÇΩ\n"
        message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {note.name}\n\n"

    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"add-note_{collection_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
                    callback_data=f"rm-choice-note_{collection_name}_{collection_id}",
                )
            ],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="collections")],
        ]
    )
    return message.format(collection_name, summ), inline_keyboard


@router.callback_query(F.data.startswith("add-note"))
@permission_decorator(Permission.ADMIN)
@edit_message
async def add_note_first_step(
    callback: CallbackQuery, state: FSMContext
) -> tuple[str, InlineKeyboardMarkup | None]:
    collection_id = int(callback.data.split("_")[1])
    await state.update_data(collection_id=collection_id)
    await state.set_state(NoteState.amount)
    return "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", None


@router.callback_query(F.data.startswith("rm-choice-note"))
@permission_decorator(Permission.ADMIN)
@edit_message
async def choose_remove_note(
    callback: CallbackQuery,
) -> tuple[str, InlineKeyboardMarkup | None]:
    collection_name = callback.data.split("_")[1]
    collection_id = int(callback.data.split("_")[2])
    async with db_manager.session_maker() as session:
        notes = await get_collection_notes_by_collection_id(
            session=session, collection_id=collection_id
        )

    i = 0
    summ = 0
    message = "üëï <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è: {0}\nüí∞ –í—Å–µ–≥–æ: {1} ‚ÇΩ</b>\n\n"
    while i < len(notes):
        message += (
            f"<b><i>{i+1}) üïí {convert_to_moscow_time(notes[i].created_at)} </i></b>\n"
        )
        message += f"    –°—É–º–º–∞: {notes[i].amount} ‚ÇΩ\n"
        message += f"    –û–ø–∏—Å–∞–Ω–∏–µ: {notes[i].name}\n\n"
        summ += notes[i].amount
        i += 1
    message += "<i>–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</i>"
    buttons = [
        InlineKeyboardButton(
            text=str(index + 1),
            callback_data=f"rm-note_{note.id}",
        )
        for index, note in enumerate(notes)
    ]

    keyboard_rows = [list(filter(None, group)) for group in grouper(buttons, 2)]

    back_button = [
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data=f"collection_{collection_name}_{collection_id}"
        )
    ]
    keyboard_rows.append(back_button)

    notes_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    return message.format(collection_name, summ), notes_keyboard


@router.callback_query(F.data.startswith("rm-note"))
@permission_decorator(Permission.ADMIN)
@edit_message
async def remove_note(
    callback: CallbackQuery,
) -> tuple[str, InlineKeyboardMarkup | None]:
    note_id = int(callback.data.split("_")[1])
    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üëï –ö–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="collections")],
            [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="menu")],
        ]
    )

    try:
        async with db_manager.session_maker() as session:
            note = await get_collection_note_by_id(
                session=session, collection_note_id=note_id
            )
            await delete_collection_note(session=session, collection_note=note)
    except Exception as e:
        return (
            f"‚ùå –ó–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª–µ–Ω–∞! \n–û—à–∏–±–∫–∞:\n<tg-spoiler>{e}</tg-spoiler>",
            inline_keyboard,
        )

    return "‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", inline_keyboard


@router.message(NoteState.amount)
@permission_decorator(Permission.ADMIN)
async def note_amount_state(message: Message, state: FSMContext):
    amount = message.text
    try:
        amount = int(amount)
    except ValueError:
        await message.answer("üö´ <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑")
        return
    await state.update_data(amount=int(amount))
    await state.set_state(NoteState.name)
    await message.answer("üîñ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")


@router.message(NoteState.name)
@permission_decorator(Permission.ADMIN)
async def note_name_state(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()

    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üëï –ö–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="collections")],
            [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="menu")],
        ]
    )

    try:
        async with db_manager.session_maker() as session:
            note_create = CollectionNoteCreate(
                name=data["name"],
                amount=data["amount"],
                collection_id=data["collection_id"],
            )
            await create_collection_note(
                session=session, collection_note_create=note_create
            )
    except Exception as e:
        await message.answer(
            f"‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞! \n–û—à–∏–±–∫–∞:\n<tg-spoiler>{e}</tg-spoiler>",
            reply_markup=inline_keyboard,
        )
        return
    await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=inline_keyboard)
    await state.clear()


@router.callback_query(F.data == "rm-choice-collection")
@permission_decorator(Permission.ADMIN)
@edit_message
async def choice_remove_collection(
    _: CallbackQuery,
) -> tuple[str, InlineKeyboardMarkup | None]:
    async with db_manager.session_maker() as session:
        collections = await get_collections(session=session)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
    buttons = [
        InlineKeyboardButton(
            text=collection.name,
            callback_data=f"rm-collection_{collection.name}_{collection.id}",
        )
        for collection in collections
    ]

    keyboard_rows = [list(filter(None, group)) for group in grouper(buttons, 2)]

    back_button = [
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="collections"),
    ]
    keyboard_rows.append(back_button)
    collections_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    message = "üëï <b>–ö–æ–ª–ª–µ–∫—Ü–∏–∏:</b>\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</i>"

    return message, collections_keyboard


@router.callback_query(F.data.startswith("rm-collection"))
@permission_decorator(Permission.ADMIN)
@edit_message
async def remove_collection(
    callback: CallbackQuery,
) -> tuple[str, InlineKeyboardMarkup | None]:
    collection_id = int(callback.data.split("_")[2])
    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üëï –ö–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="collections")],
            [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="menu")],
        ]
    )

    try:
        async with db_manager.session_maker() as session:
            collection = await get_collection_by_id(
                session=session, collection_id=collection_id
            )
            await delete_collection(session=session, collection=collection)
    except Exception as e:
        return (
            f"‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–µ–Ω–∞! \n–û—à–∏–±–∫–∞:\n<tg-spoiler>{e}</tg-spoiler>",
            inline_keyboard,
        )

    return "‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", inline_keyboard


def register_handlers(dp: Dispatcher):
    dp.include_router(router)
